[{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"sec:intro","dir":"Articles","previous_headings":"","what":"Introduction: Retrieval of Storting data in R","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"wide variety parliamentary data made available public several countries last decade. frontend websites back-end APIs, researchers parliaments never easier access large amounts data now. However, frontend API scraped data often come formats (.html, .xml, .json, etc) require substantial structuring pre-processing ready subsequent analyses. vignette, present stortingscrape package R. stortingscrape makes retrieving data Norwegian parliament (Stortinget) easily accessible back-end API. data requested using package require little structuring. scope package, discussed , ranges general data parliament (rules, session info, committees, etc) data parties, bibliographies MPs, questions, hearings, debates, votes, . Although first attempt make data Stortinget easily accessible, stortingscrape live vacuum. variety parliamentary data different countries available researchers use freely. parliamentary debates, Thomas, Pang, Lee (2006) one first gather make available data. data cover proceedings 2005 House debates. Eggers Spirling (2014) structured UK Hansard speech data, spans 1802 2010. Beelen et al. (2017) provided continuously updated data Canadian parliament, Rauh Schwalbach (2020) made available collection speech data 9 countries, Turner-Zwinkels et al. (2021) developed day--day dataset MPs Germany, Switzerland, Netherlands, period 1947 2017. examples , however, different stortingscrape finished datasets ready download limited scope. main goal stortingscrape allow researchers access data Norwegian parliament easily, also still able structure data according ones need. importantly, package facilitated weaving together different parts data.stortinget.API. start vignette briefly discussing openly accessible data.stortinget.API. Next, describe philosophy, scope general usage stortingscrape package. Finally, present minimal examples possible workflows working package, summarize.","code":""},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"sec:api","dir":"Articles","previous_headings":"","what":"Stortinget’s API","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"Norwegian parliament comparatively early granting open access data API launched data.stortinget.2012. general purpose API priovide transparency form om raw data, mirroring frontend web-page information stortinget.. format API fairly consistent time existance, small style changes different versions.1 stortingscrape built version \\(1.6\\) API. Except content blocked public (e.g. debates behind closed doors), API contains recorded data produced Stortinget. data include data individual MPs, transcripts debates, voting results, hearing input, much . exhaustive list data sources API.2 data available API can accessed XML JSON format3, flexible formats compressing data nested lists. exmple, raw data input general information single MP4 looks like : typical XML structure API, although parts data complex XML tree can nested multiple times. discussed next section.","code":"#> <person> #>   <respons_dato_tid>2021-08-13T14:59:48.2114895+02:00<\/respons_dato_tid> #>   <versjon>1.6<\/versjon> #>   <doedsdato>0001-01-01T00:00:00<\/doedsdato> #>   <etternavn>Aasen<\/etternavn> #>   <foedselsdato>1967-02-21T00:00:00<\/foedselsdato> #>   <fornavn>Marianne<\/fornavn> #>   <id>MAAA<\/id> #>   <kjoenn>kvinne<\/kjoenn> #> <\/person>"},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"sec:scope","dir":"Articles","previous_headings":"","what":"Package philosophy, scope, and usage","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"stortingscrape aims make Norwegian parliamentary data easily accessible, also flexible enough tailoring different underlying data sources ones needs. Indeed, contrary open source parliamentary speech data, stortingscrape aims giving user much agency possible tailoring data specific needs. addition user agency, package built core philosophy simplifying data structures, make seamless workflows different parts Storting API, limit data duplication functions. lot analysis tools R requires 2 dimensional data formats, stortingscrape package prioritize converting nested XML format data frames, possible. However, sources data Storting API nested way makes retaining data 2 dimensional space either impossible verbose. example, get_mp_bio() function, extract specific MP’s biography id, data MP personalia, parliamentary periods MP seat, vocations, literature authored MP, . order make data workable, resulting format function call list data frames part data. different list elements , however, easily combined different applications data. One core thoughts behind workflow package make easy combine different parts API extract data actually need. facilitate , functions within stortingscrape built work seemlessly apply() family control flow constructs R. want call API repeatedly, functions expected often ran repeatedly good_manners argument. make R sleep set amount seconds calling API. recommended set argument 2 seconds higher multiple calls API. Generally, package built recommendations given httr package (Wickham 2020)5. data Stortinget’s API frontend web page interconnected ids various sources (session id, MP id, case id, question id, vote id, etc.). stortingscrape core extraction methods based around . One major benefits whether want extract, instance, single question found frontend web page, questions parliamentary session, package flexible enough suit needs (see workflow section). also enable users quickly retreive data frontend web-page.6 interconnectedness API’s data, overlapping sources data. instance, retreival MP general information (get_mp()), biography (get_mp_bio()), MPs session (get_parlperiod_mps()) name MP API, get_mp() return MP names stortingscrape, two data sources easily merged MP’s id (see workflow section). scope stortingscrape almost entire API Stortinget, notable shortcomings. First, functions dynamically updated data sources, current speaker lists (https://data.stortinget./dokumentasjon-og-hjelp/talerliste/). Second, mentioned , duplicated data avoided whenever possible. Third, certain unstandardized image sources – publication attachment figures – supported package. finally, publications get_publication() function can retrieved, returned parsed XML data format rvest package data standardized across different publications. three overarching sources data stortingscrape: 1) Parliamentary structure data, 2) MP data, 3) Parliamentary activity data. , /cases, linked various forms ID tags. example, retrieving MPs given session (get_parlperiod_mps()) give access MP IDs (mp_id) session, can used extract biographies, pictures, speech activity, MPs. Next, showcase examples typical workflow using stortingscrape look like.","code":""},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"sec:workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"following section, discuss examples data extraction stortingscrape. start showing basic extraction voting data based vote IDs frontend web-page – stortinget.. Next, exemplify large set period session specific data retrieving MPs specific parliamentary period interpellations specified parliamentary session. Finally, show different functions stortingscrape package works together – merging data cases belonging vote results. Note vignette built using examples data folder package.7","code":"data_files <- data(package = \"stortingscrape\")$results[,\"Item\"] data(list = data_files)"},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"basic-extraction","dir":"Articles","previous_headings":"Workflow","what":"Basic extraction","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"basic extraction specific data Stortinget’s API revolves around various forms ID tags. example, MPs unique ID, cases unique IDs, votes unique IDs, . following example, highlight going case economic measures Covid pandemic party distribution specific vote case. First, case relatively rapidly proposed treated Storting early days June 2021. case entirety can found . see procedure steps government proposal, work finance committee, debate decision. Lets say particular proposal case caught eye – instance, vote number 61 Labor Party asking government propose plan implementing International Labor Organization’s core conventions Human Rights Act (menneskerettighetsloven). can seen link case , ID within URL: “85196”. case ID. can use get_case() function stortingscrape extract votes case: now data frame 71 votes 22 variables. data structure selected variables, looks like : interested result proposal 217 Labor Party, can extract ID particular vote data: get personal MP vote results particular vote, can use get_result_vote() function:8 looking first six rows data, readers know Norwegian political system suspect vote opposition versus government vote, can also easily get distribution votes party: suspected, vote divided opposition (, MDG, R, SP, SV) government parties (H, KrF, V, FrP), adopted thin margin 2 votes. course, minimal example, highlight methods extracting multiple votes .","code":"## covid_relief <- get_vote(\"85196\") head(covid_relief[, c(\"case_id\", \"vote_id\", \"n_for\", \"n_against\", \"adopted\")]) #>   case_id vote_id n_for n_against adopted #> 1   85196   17631     1        87   false #> 2   85196   17632     6        81   false #> 3   85196   17633    14        74   false #> 4   85196   17634    42        46   false #> 5   85196   17635    40        48   false #> 6   85196   17636    15        73   false covid_relief$vote_id[which(grepl(\"217\", covid_relief$vote_topic))] ## covid_relief_result <- get_result_vote(\"17689\")  head(covid_relief_result[, c(\"vote_id\", \"mp_id\", \"party_id\", \"vote\")]) #>   vote_id mp_id party_id          vote #> 1   17689   SSA        H           mot #> 2   17689   EAG        H ikke_tilstede #> 3   17689   PTA      FrP           mot #> 4   17689   DTA        A ikke_tilstede #> 5   17689  KAAN       SV           for #> 6   17689  KAND       Sp           for table(covid_relief_result$party_id,        covid_relief_result$vote) |>   addmargins() #>       #>       for ikke_tilstede mot Sum #>   A    27            21   0  48 #>   FrP   0            12  14  26 #>   H     0            22  23  45 #>   KrF   0             5   3   8 #>   MDG   1             0   0   1 #>   R     1             0   0   1 #>   Sp    8            12   0  20 #>   SV    5             6   0  11 #>   Uav   0             0   1   1 #>   V     0             5   3   8 #>   Sum  42            83  44 169"},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"sequences-of-data-extraction","dir":"Articles","previous_headings":"Workflow","what":"Sequences of data extraction","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":", show two examples sequentially extracting data interest.","code":""},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"example-1-from-periods-to-interpellations","dir":"Articles","previous_headings":"Workflow > Sequences of data extraction","what":"Example 1: From periods to interpellations","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"mentioned IDs Stortinget’s data extractable frontend web-page, also back-end API. data can retrieved various forms parliamentary period session specific functions stortingscrape. section, show get MPs specific parliamentary period interpellations parliamentary session. First, however, note IDs periods sessions accessed two core functions package: parliamentary period IDs mainly used MP data; Norwegian MPs elected 4 year terms, constitutional arrangement snap elections. MP data also stretch way back time data API: data, way short extracting rich data individual MPs, demonstrated . Content data, however, use parliamentary session IDs rather period IDs. functions standardized function names get_session_*(). example, can access interpellations 2002-2003 session get_session_questions() function: , 22 interpellations 26 different variables. Unfortunately, API gives question answer different types question requests. Retrieval question answers daunting task, accessible unstandardized get_publication() function.","code":"## parl_periods <- get_parlperiods() ## parl_sessions <- get_parlsessions()  tail(parl_periods[,c(\"id\", \"years\")]) #>         id     years #> 15 1965-69 1965-1969 #> 16 1961-65 1961-1965 #> 17 1958-61 1958-1961 #> 18 1954-57 1954-1958 #> 19 1950-53 1950-1954 #> 20 1945-49 1945-1950 tail(parl_sessions[,c(\"id\", \"years\")]) #>         id     years #> 31 1991-92 1991-1992 #> 32 1990-91 1990-1991 #> 33 1989-90 1989-1990 #> 34 1988-89 1988-1989 #> 35 1987-88 1987-1988 #> 36 1986-87 1986-1987 parl_periods$id[nrow(parl_periods)] #> [1] \"1945-49\" ## mps4549 <- get_parlperiod_mps(\"1945-49\") head(mps4549[, c(\"mp_id\", \"county_id\", \"party_id\", \"period_id\")]) #>   mp_id county_id party_id period_id #> 1  AAKU        VA        A   1945-49 #> 2  AARY        AA        A   1945-49 #> 3  ALKJ        He        H   1945-49 #> 4  ALVÅ        Fi      NKP   1945-49 #> 5  AMSK        ST        A   1945-49 #> 6  ANBØ        SF        V   1945-49 ## interp0203 <- get_session_questions(\"2002-2003\", q_type = \"interpellasjoner\") dim(interp0203) #> [1] 22 26"},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"example-2-from-cases-to-mp-vote-results","dir":"Articles","previous_headings":"Workflow","what":"Example 2: From cases to MP vote results","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"Next, showcase get go cases section, extracting case interest vote results, vote matrices case. First, extract cases 2019-2020 session: cases object contain cases treated 2019-2020 parliamentary session. note cases list 4 elements ($root, $topics, $proposers, $spokespersons). following, use case ID $root access vote information case – example 48th row data:9 output gives us data frame three votes 22 variables, whereof one vote ID votes. can use variable retrieve rollcall data, using get_result_vote function: make overall proportion table party distribution three votes:","code":"## cases <- get_session_cases(\"2019-2020\") # The case titles are, unfortunately, not translated cases$root$title_short[48] #> [1] \"Representantforslag om å reversere avgiftsøkninger på alkoholfrie drikkevarer og bevare arbeidsplasser i norsk næringsmiddelindustri og varehandel\" ## vote <- get_vote(cases$root$id[48])  vote[, c(\"case_id\", \"vote_id\",           \"alternative_vote\",           \"n_for\", \"n_absent\", \"n_against\")] #>   case_id vote_id alternative_vote n_for n_absent n_against #> 1   78686   15404               -1     1       82        86 #> 2   78686   15405            15406    46       82        41 #> 3   78686   15406            15405    41       82        46 ## vote_result <- lapply(vote$vote_id, get_result_vote, good_manners = 5) names(vote_result) <- vote$vote_id  vote_result <- do.call(rbind, vote_result) head(vote_result[, 3:ncol(vote_result)]) #>         vote_id mp_id party_id          vote permanent_sub_for sub_for #> 15404.1   15404   SSA        H           mot              <NA>    <NA> #> 15404.2   15404   EAG        H           mot              <NA>    <NA> #> 15404.3   15404   PTA      FrP           mot              <NA>    <NA> #> 15404.4   15404   DTA        A           mot              <NA>    <NA> #> 15404.5   15404  KAAN       SV           mot              <NA>    <NA> #> 15404.6   15404   MAA       Sp ikke_tilstede              <NA>    <NA> table(vote_result$vote, vote_result$party_id,       dnn = c(\"Vote result\", \"Vote ID\")) |>   prop.table(margin = 2) |>   round(digits = 2)"},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"sec:summary","dir":"Articles","previous_headings":"","what":"Summary","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"vignette, presented philosophy, scope, usage, workflow stortingscrape package R. sum, stortingscrape makes retrieving data Norwegian parliament (Stortinget) accessible back-end API (data.stortinget.). One core philosophy package let user tailor data ones needs, time extracting minimal overlapping data. scope package ranges general data parliament (rules, session info, committees, etc) data parties, bibliographies MPs, questions, hearings, debates, votes, .","code":""},{"path":"https://martigso.github.io/stortingscrape/articles/stortingscrape.html","id":"app:functions","dir":"Articles","previous_headings":"","what":"List of functions","title":"stortingscrape: An R package for accessing data from the Norwegian parliament","text":"list functions description can found package documentation within R github.","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Søyland. Author, maintainer.","code":""},{"path":"https://martigso.github.io/stortingscrape/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Søyland M (2023). stortingscrape: Access Data Norwegian Parliament API. R package version 0.1.4,  https://martigso.github.io/stortingscrape/, https://github.com/martigso/stortingscrape.","code":"@Manual{,   title = {stortingscrape: Access Data from the Norwegian Parliament API},   author = {Martin Søyland},   year = {2023},   note = {R package version 0.1.4,  https://martigso.github.io/stortingscrape/},   url = {https://github.com/martigso/stortingscrape}, }"},{"path":"https://martigso.github.io/stortingscrape/index.html","id":"stortingscrape-","dir":"","previous_headings":"","what":"Access Data from the Norwegian Parliament API","title":"Access Data from the Norwegian Parliament API","text":"stortingscrape R package retrieving data Norwegian parliament (Stortinget) easily accessible back-end API. data requested using package require little structuring. scope package ranges general data parliament (rules, session info, committees, etc) data parties, bibliographies MPs, questions, hearings, debates, votes, . main goal stortingscrape allow researchers access data Norwegian parliament easily, also still able structure data according ones need. importantly, package facilitated weaving together different parts data.stortinget.API.","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/index.html","id":"cran-stable-version","dir":"","previous_headings":"Installation","what":"CRAN (stable version)","title":"Access Data from the Norwegian Parliament API","text":"latest stable version stortingscrape package can installed running CRAN:","code":"install.packages(\"stortingscrape\")"},{"path":"https://martigso.github.io/stortingscrape/index.html","id":"github-development-version","dir":"","previous_headings":"Installation","what":"Github (development version)","title":"Access Data from the Norwegian Parliament API","text":"development version package can installed either cloning repository building package R installing via devtools::install_github() function:","code":"devtools::install_github(\"martigso/stortingscrape\") library(stortingscrape)"},{"path":"https://martigso.github.io/stortingscrape/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage examples","title":"Access Data from the Norwegian Parliament API","text":"Request interpellations parliamentary session: Get biographies MPs given parliamentary period (take ~30min run):","code":"library(stortingscrape)  parl_sessions |> # sessions data are built into the package   head()         # but can also be retrieved with `get_parlsessions()`   qsesh <- get_session_questions(parl_sessions$id[9], q_type = \"interpellasjoner\")  for(i in qsesh$id) {      message(\"Getting \", i)      int1213[[i]] <- get_question(i, good_manners = 2)  }  int1213 <- do.call(rbind, int1213)  head(int1213) parl_periods # parliamentary periods (4 years) are built into the package,              # but can also be retrieved with `get_parlperiods()`  mps <- get_parlperiod_mps(parl_periods$id[1], substitute = TRUE)  mps_bios <- lapply(mps$mp_id, get_mp_bio, good_manners = 2)  # Expand by all periods the MP has been in parliament mps_periods <- lapply(mps_bios, function(x){      data.frame(x$root,              x$parl_periods)  })  mps_periods <- do.call(rbind, mps_periods)  # Expand by all positions held in parliament mps_positions <- lapply(mps_bios, function(x){      if(nrow(x$parl_positions) < 1) return()      data.frame(x$root,              x$parl_positions)    })  mps_positions <- do.call(rbind, mps_positions)"},{"path":"https://martigso.github.io/stortingscrape/index.html","id":"data-description","dir":"","previous_headings":"","what":"Data description","title":"Access Data from the Norwegian Parliament API","text":"data described detail API Stortinget.","code":""},{"path":"https://martigso.github.io/stortingscrape/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Access Data from the Norwegian Parliament API","text":"can find list functions .","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Storting cases in the 2019-2020 session — cases","title":"Storting cases in the 2019-2020 session — cases","text":"dataset containing cases 2019-2020 parliamentary session Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Storting cases in the 2019-2020 session — cases","text":"","code":"cases"},{"path":"https://martigso.github.io/stortingscrape/reference/cases.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Storting cases in the 2019-2020 session — cases","text":"list four elements $root main data MP $topics named list case id $proposers named list case id $spokespersons named list case id description: get_session_cases","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/cases.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Storting cases in the 2019-2020 session — cases","text":"https://data.stortinget./eksport/saker?sesjonid=2019-2020","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief.html","id":null,"dir":"Reference","previous_headings":"","what":"Vote id 85196 — covid_relief","title":"Vote id 85196 — covid_relief","text":"dataset containing vote information case id 85196","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vote id 85196 — covid_relief","text":"","code":"covid_relief"},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vote id 85196 — covid_relief","text":"data frame 22 columns 71 rows response_date Date data retrieval version Data version API case_id Case id vote alternative_vote Whether vote alternative vote n_for Number votes n_absent Number MPs absent n_against Number votes treatment_order Order treated votes agenda_case_number Case number agenda meeting free_vote Logical indication whether vote related case whole comment Vote comment meeting_map_number Number meeting map personal_vote Logical indication whether vote recorded roll call president_id Id president holding president chair time voting president_party_id Party sitting president adopted Logical indication whether proposal voted adopted vote_id Id vote vote_method Voting method vote_result_type Result type (enstemmig_vedtatt = unanimously adopted) vote_result_type_text See vote_result_type vote_topic Description proposal voted upon vote_datetime Date time vote","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vote id 85196 — covid_relief","text":"https://data.stortinget./eksport/voteringer?sakid=85196","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Vote id 85196 results — covid_relief_result","title":"Vote id 85196 results — covid_relief_result","text":"dataset containing vote matrix vote id 17689","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vote id 85196 results — covid_relief_result","text":"","code":"covid_relief_result"},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief_result.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vote id 85196 results — covid_relief_result","text":"data frame 8 columns 169 rows response_date Date data retrieval version Data version API vote_id Id vote mp_id MP id party_id Party id vote Vote: , mot (), ikke_tilstede (absent) permanent_sub_for Id MP originally holding seat, substitute sub_for Id MP originally holding seat","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/covid_relief_result.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vote id 85196 results — covid_relief_result","text":"https://data.stortinget./eksport/voteringsresultat?voteringid=17689","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_committees.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary committees over all sessions — get_all_committees","title":"Parliamentary committees over all sessions — get_all_committees","text":"Imports data committee names ids sessions data.stortinget.API.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_committees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary committees over all sessions — get_all_committees","text":"","code":"get_all_committees()"},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_committees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliamentary committees over all sessions — get_all_committees","text":"data frame committees, variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_committees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliamentary committees over all sessions — get_all_committees","text":"","code":"if (FALSE) { coms <- get_all_committees() head(coms) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_parties.html","id":null,"dir":"Reference","previous_headings":"","what":"All parliamentary parties — get_all_parties","title":"All parliamentary parties — get_all_parties","text":"function retrieving Norwegian parliamentary parties data.stortinget.API.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_parties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All parliamentary parties — get_all_parties","text":"","code":"get_all_parties()"},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_parties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All parliamentary parties — get_all_parties","text":"data.frame parties, variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_all_parties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All parliamentary parties — get_all_parties","text":"","code":"if (FALSE) { parties <- get_all_parties() head(parties) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive a parliamentary case — get_case","title":"Retreive a parliamentary case — get_case","text":"function retrieving single parliamentary case id.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive a parliamentary case — get_case","text":"","code":"get_case(caseid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive a parliamentary case — get_case","text":"caseid Character string indicating id case request good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retreive a parliamentary case — get_case","text":"list seven data frame elements: $root (main data case) $topic (topics related case) $publication_references (references publications case) $proposers (MPs behind case proposal, relevant) $proceeding_steps (case proceeding steps) $spokespersons (MPs spokespersons case) $keywords (keywords associated case)","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retreive a parliamentary case — get_case","text":"","code":"if (FALSE) {  # Get one case case <- get_case(\"30233\") case  # Get multiple cases cases <- lapply(c(\"30233\", \"30362\", \"30234\", \"30236\"), get_case, good_manners = 2) cases_root <- lapply(cases, function(x) x$root) cases_root <- do.call(rbind, cases_root) cases_root  cases_keywords <- lapply(1:nrow(cases_root), function(x){   tmp <- cases[[x]]$keywords   tmp$case_id <- cases_root$id[x]   return(tmp) }) cases_keywords <- do.call(rbind, cases_keywords) cases_keywords  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of MPs in a given parliamentary period — get_counties","title":"Get list of MPs in a given parliamentary period — get_counties","text":"function retrieving Norwegian MPs given parliamentary period parliament API.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of MPs in a given parliamentary period — get_counties","text":"","code":"get_counties(historical = FALSE)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of MPs in a given parliamentary period — get_counties","text":"historical Logical. Whether include historical counties.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of MPs in a given parliamentary period — get_counties","text":"data frame following variables:","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_counties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of MPs in a given parliamentary period — get_counties","text":"","code":"if (FALSE) {  # Request one MP by id get_counties()  # With historical counties get_counties(historical = TRUE) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_decision_votes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive vote decision for a specified vote — get_decision_votes","title":"Retreive vote decision for a specified vote — get_decision_votes","text":"function retrieving vote decisions specific vote. Vote data available 2011-2012 session","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_decision_votes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive vote decision for a specified vote — get_decision_votes","text":"","code":"get_decision_votes(voteid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_decision_votes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive vote decision for a specified vote — get_decision_votes","text":"voteid Character string indicating id vote request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_decision_votes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retreive vote decision for a specified vote — get_decision_votes","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_decision_votes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retreive vote decision for a specified vote — get_decision_votes","text":"","code":"if (FALSE) { decision <- get_decision_votes(123) decision }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the hearing input for a specified hearing — get_hearing_input","title":"Retrieve the hearing input for a specified hearing — get_hearing_input","text":"function retrieving hearing input specified hearing.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the hearing input for a specified hearing — get_hearing_input","text":"","code":"get_hearing_input(hearingid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the hearing input for a specified hearing — get_hearing_input","text":"hearingid Character string indicating id hearing retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the hearing input for a specified hearing — get_hearing_input","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the hearing input for a specified hearing — get_hearing_input","text":"","code":"if (FALSE) { get_hearing_input(hearingid = 10004166) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the hearing program for a specified hearing — get_hearing_program","title":"Retrieve the hearing program for a specified hearing — get_hearing_program","text":"function retrieving hearing program specified hearing. earlier periods (around 2005 back) less rich data variables","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the hearing program for a specified hearing — get_hearing_program","text":"","code":"get_hearing_program(hearingid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the hearing program for a specified hearing — get_hearing_program","text":"hearingid Character string indicating id hearing retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the hearing program for a specified hearing — get_hearing_program","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_hearing_program.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the hearing program for a specified hearing — get_hearing_program","text":"","code":"if (FALSE) { s0910 <- get_session_hearings(\"2009-2010\") hearing <- get_hearing_program(s0910$hearing$hearing_id[1]) head(hearing) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_meeting_agenda.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive agenda for a specified meeting — get_meeting_agenda","title":"Retreive agenda for a specified meeting — get_meeting_agenda","text":"function retrieving agenda specific meeting.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_meeting_agenda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive agenda for a specified meeting — get_meeting_agenda","text":"","code":"get_meeting_agenda(meetingid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_meeting_agenda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive agenda for a specified meeting — get_meeting_agenda","text":"meetingid Character string indicating id meeting request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_meeting_agenda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retreive agenda for a specified meeting — get_meeting_agenda","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_meeting_agenda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retreive agenda for a specified meeting — get_meeting_agenda","text":"","code":"if (FALSE) {  meetings0910 <- get_session_meetings(\"2009-2010\") meeting_agenda <- get_meeting_agenda(meetings0910$meeting_id[161]) meeting_agenda }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract information on specific MPs — get_mp","title":"Extract information on specific MPs — get_mp","text":"function retrieving information Norwegian MPs parliament API","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract information on specific MPs — get_mp","text":"","code":"get_mp(mpid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract information on specific MPs — get_mp","text":"mpid Character string indicating id MP retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract information on specific MPs — get_mp","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract information on specific MPs — get_mp","text":"","code":"if (FALSE) { # Request one MP by id get_mp(\"AAMH\")  # Request several MPs by id ids <- c(\"AAMH\", \"AMSK\", \"MAAA\")  mps <- lapply(ids, get_mp, good_manners = 2)  mps <- do.call(rbind, mps) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract biography of specific MPs — get_mp_bio","title":"Extract biography of specific MPs — get_mp_bio","text":"function retrieving biography Norwegian MPs parliament API","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract biography of specific MPs — get_mp_bio","text":"","code":"get_mp_bio(mpid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract biography of specific MPs — get_mp_bio","text":"mpid Character string indicating id MP retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_bio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract biography of specific MPs — get_mp_bio","text":"list ten data frames: $root (main data MP) $literature (literature MP contributed ) $leave_of_absence (times MP leave) $personalia (MP's personalia) $father (MP's father personalia) $mother (MP's mother personalia) $parl_periods (parliamentary periods MP held seat) $parl_positions (parliamentary positions held MP) $vocation (vocation education MP outside parliament) $other_positions (positions held outside parliament)","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_bio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract biography of specific MPs — get_mp_bio","text":"","code":"if (FALSE) {  # Request one MP by id get_mp_bio(\"AAMH\")  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_pic.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve picture of specific MPs — get_mp_pic","title":"Retrieve picture of specific MPs — get_mp_pic","text":"function retrieving Norwegian MP pictures id.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_pic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve picture of specific MPs — get_mp_pic","text":"","code":"get_mp_pic(mpid = NA, size = \"middels\",             destfile = NA, show_plot = FALSE,             good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_pic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve picture of specific MPs — get_mp_pic","text":"mpid Character string indicating id MP retrieve. size Character string size picture. Accepts values \"lite\" (small), \"middels\" (medium -- default), \"stort\" (big). destfile Character string specifying save picture show_plot Logical. FALSE (default) plot produced TRUE plot produced. Requires \"imager\" package. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_pic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve picture of specific MPs — get_mp_pic","text":"Picture requested MP preferred size.","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_mp_pic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve picture of specific MPs — get_mp_pic","text":"","code":"if (FALSE) { # Request one MP by id get_mp_pic(mpid = \"AAMH\", destfile = \"~/Pictures/AAMH.jpeg\", show_plot = TRUE, size = \"stort\")  # With good manners for multiple calls lapply(c(\"AAMH\", \"CIH\", \"TKF\"), function(x){   get_mp_pic(mpid = x, destfile = paste0(\"~/Pictures/\", x),    show_plot = TRUE, size = \"stort\", good_manners = 2)   }) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_mps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of MPs in a given parliamentary period — get_parlperiod_mps","title":"Get list of MPs in a given parliamentary period — get_parlperiod_mps","text":"function retrieving Norwegian MPs given parliamentary period parliament API","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_mps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of MPs in a given parliamentary period — get_parlperiod_mps","text":"","code":"get_parlperiod_mps(periodid = NA, substitute = FALSE, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_mps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of MPs in a given parliamentary period — get_parlperiod_mps","text":"periodid Character string indicating id parliamentary period retrieve. substitute Logical. Whether include substitute MPs. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_mps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of MPs in a given parliamentary period — get_parlperiod_mps","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_mps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of MPs in a given parliamentary period — get_parlperiod_mps","text":"","code":"if (FALSE) {  # Request one MP by id get_parlperiod_mps(\"2005-2009\")  # Request MPs from several periods by id ids <- c(\"1961-65\", \"1997-01\", \"2009-2013\") mps <- lapply(ids, get_parlperiod_mps, good_manners = 2) mps <- do.call(rbind, mps)  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_presidency.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of presidency in a given parliamentary period — get_parlperiod_presidency","title":"Get list of presidency in a given parliamentary period — get_parlperiod_presidency","text":"function retrieving presidency given parliamentary period parliament API.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_presidency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of presidency in a given parliamentary period — get_parlperiod_presidency","text":"","code":"get_parlperiod_presidency(periodid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_presidency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of presidency in a given parliamentary period — get_parlperiod_presidency","text":"periodid Character string indicating id parliamentary period retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_presidency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of presidency in a given parliamentary period — get_parlperiod_presidency","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiod_presidency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of presidency in a given parliamentary period — get_parlperiod_presidency","text":"","code":"if (FALSE) {   # Request one MP by id get_parlperiod_presidency(\"2005-2009\")  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parliamentary Periods — get_parlperiods","title":"Get Parliamentary Periods — get_parlperiods","text":"function retrieving dates parliamentary periods WWII","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parliamentary Periods — get_parlperiods","text":"","code":"get_parlperiods()"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parliamentary Periods — get_parlperiods","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlperiods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Parliamentary Periods — get_parlperiods","text":"","code":"if (FALSE) {  parlper <- get_parlperiods() parlper  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlsessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Parliamentary Sessions — get_parlsessions","title":"Get Parliamentary Sessions — get_parlsessions","text":"function retrieving dates parliamentary sessions WWII","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlsessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Parliamentary Sessions — get_parlsessions","text":"","code":"get_parlsessions()"},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlsessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Parliamentary Sessions — get_parlsessions","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_parlsessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Parliamentary Sessions — get_parlsessions","text":"","code":"if (FALSE) {  parlses <- get_parlsessions() parlses  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_proceedings.html","id":null,"dir":"Reference","previous_headings":"","what":"All parliamentary proceedings — get_proceedings","title":"All parliamentary proceedings — get_proceedings","text":"function retrieving proceedings Stortinget, current historical.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_proceedings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All parliamentary proceedings — get_proceedings","text":"","code":"get_proceedings()"},{"path":"https://martigso.github.io/stortingscrape/reference/get_proceedings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All parliamentary proceedings — get_proceedings","text":"list three dataframes: $root (download meta data) $proceedings (description main proceeding categories) $poceedings_steps (description proceeding steps within main category)","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_proceedings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All parliamentary proceedings — get_proceedings","text":"","code":"if (FALSE) {  get_proceedings()  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_proposal_votes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive all votes for a specified vote proposal — get_proposal_votes","title":"Retreive all votes for a specified vote proposal — get_proposal_votes","text":"function retrieving votes specific vote proposal. Vote data available 2011-2012 session","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_proposal_votes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive all votes for a specified vote proposal — get_proposal_votes","text":"","code":"get_proposal_votes(voteid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_proposal_votes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive all votes for a specified vote proposal — get_proposal_votes","text":"voteid Character string indicating id vote request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_proposal_votes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retreive all votes for a specified vote proposal — get_proposal_votes","text":"list two elements: $proposal_vote (main data vote proposal) $proposal_by_parties$proposal_id (parties (id) stood behind proposal(s))","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_proposal_votes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retreive all votes for a specified vote proposal — get_proposal_votes","text":"","code":"if (FALSE) {  prop <- get_proposal_votes(7523) prop  for(i in 1:length(prop$proposal_by_parties)){     prop$proposal_vote$parties[i] <- paste0(prop$proposal_by_parties[[i]],                                              collapse = \", \")  }  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_publication.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a specific publication — get_publication","title":"Retrieve a specific publication — get_publication","text":"function retrieving specific publication. formated differently API, returning object raw html_document format, best manipulated html packages rvest.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_publication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a specific publication — get_publication","text":"","code":"get_publication(publicationid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_publication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a specific publication — get_publication","text":"publicationid Character string indicating id publication request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_publication.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a specific publication — get_publication","text":"raw html_document","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_publication.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a specific publication — get_publication","text":"","code":"if (FALSE) { pub <- get_publication(\"refs-201819-03-06\") (pub %>% html_elements(\"replikk\"))[1] %>% html_text() }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_question.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary question — get_question","title":"Parliamentary question — get_question","text":"function retrieving single parliamentary questions id. retrieving whole debate question, get_publication function used","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_question.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary question — get_question","text":"","code":"get_question(questionid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_question.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parliamentary question — get_question","text":"questionid Character string indicating id session request interpellations good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_question.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliamentary question — get_question","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_question.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliamentary question — get_question","text":"","code":"if (FALSE) { # An example of a possible workflow  ## Retreive sessions sessions <- get_parlsessions()  ## Retreive all interpellations for a particular session qsesh <- get_session_questions(sessions$id[9], q_type = \"interpellasjoner\")  ## Retreve detailed information on all interpellations in that session library(pbmcapply) # for progress bar. never use paralell on scraping int1213 <- pbmclapply(qsesh$id, function(x){     get_question(x, good_manners = 2) }, mc.cores = 1)  quest1213 <- do.call(rbind, int1213) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_question_hour.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve question hour details for a specified meeting — get_question_hour","title":"Retrieve question hour details for a specified meeting — get_question_hour","text":"function retrieving detailed overview question hour specific meeting","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_question_hour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve question hour details for a specified meeting — get_question_hour","text":"","code":"get_question_hour(meetingid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_question_hour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve question hour details for a specified meeting — get_question_hour","text":"meetingid Character string indicating id meeting request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_question_hour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve question hour details for a specified meeting — get_question_hour","text":"list ten data frames: $root (download meta data) $question_hour_ministers (id ministers parliament question hour/time) $question_time $publication_reference","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_question_hour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve question hour details for a specified meeting — get_question_hour","text":"","code":"if (FALSE) { get_question_hour(10232) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_result_vote.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve vote results on MP level for a specified vote — get_result_vote","title":"Retrieve vote results on MP level for a specified vote — get_result_vote","text":"function retrieving vote results specific vote MP level. Vote data available 2011-2012 session. Needs preprocessing use rollcall packages, ideal.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_result_vote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve vote results on MP level for a specified vote — get_result_vote","text":"","code":"get_result_vote(voteid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_result_vote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve vote results on MP level for a specified vote — get_result_vote","text":"voteid Character string indicating id vote request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_result_vote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve vote results on MP level for a specified vote — get_result_vote","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_result_vote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve vote results on MP level for a specified vote — get_result_vote","text":"","code":"if (FALSE) {  v <- get_result_vote(12345) table(v$vote)  p <- get_proposal_votes(12345)  stringr::str_replace_all(p$proposal_vote$proposal_text,                           \"\\\\<(.*)\\\\>|\\\\r\\\\n\", \"\")  %>%    stringr::str_trim() }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Cases in specified session — get_session_cases","title":"Cases in specified session — get_session_cases","text":"function retrieving cases treated specified parliamentary session.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cases in specified session — get_session_cases","text":"","code":"get_session_cases(sessionid = NA, good_manners = 0, cores = 1)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cases in specified session — get_session_cases","text":"sessionid Character string indicating id parliamentary session retrieve. good_manners Integer. Seconds delay calls making multiple calls function cores Integer. Number cores (1 default) use structuring data. 1 work windows","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cases in specified session — get_session_cases","text":"data.frame following variables: $root (main data MP) $topics (named list case id) $proposers (named list case id) $spokespersons (named list case id)","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cases in specified session — get_session_cases","text":"","code":"if (FALSE) { s0506 <- get_session_cases(\"2005-2006\") head(s0506) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_committees.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary committees in specified session — get_session_committees","title":"Parliamentary committees in specified session — get_session_committees","text":"function retrieving Norwegian parliamentary committees specified parliamentary session","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_committees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary committees in specified session — get_session_committees","text":"","code":"get_session_committees(sessionid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_committees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parliamentary committees in specified session — get_session_committees","text":"sessionid Character string indicating id parliamentary session retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_committees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliamentary committees in specified session — get_session_committees","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_committees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliamentary committees in specified session — get_session_committees","text":"","code":"if (FALSE) {  coms <- get_session_committees(\"2001-2002\") coms }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_decisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all decisions for a specified session — get_session_decisions","title":"Retrieve all decisions for a specified session — get_session_decisions","text":"function retrieving decisions specific parliamentary session.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_decisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all decisions for a specified session — get_session_decisions","text":"","code":"get_session_decisions(sessionid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_decisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all decisions for a specified session — get_session_decisions","text":"sessionid Character string indicating id session request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_decisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all decisions for a specified session — get_session_decisions","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_decisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all decisions for a specified session — get_session_decisions","text":"","code":"if (FALSE) {  desci <- get_session_decisions(\"2004-2005\") head(desci) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_delegations.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary delegations in specified session — get_session_delegations","title":"Parliamentary delegations in specified session — get_session_delegations","text":"function retrieving delegations specified parliamentary session.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_delegations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary delegations in specified session — get_session_delegations","text":"","code":"get_session_delegations(sessionid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_delegations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parliamentary delegations in specified session — get_session_delegations","text":"sessionid Character string indicating id parliamentary session retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_delegations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliamentary delegations in specified session — get_session_delegations","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_delegations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliamentary delegations in specified session — get_session_delegations","text":"","code":"if (FALSE) {  deleg <- get_session_delegations(\"2015-2016\") deleg  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_hearings.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve hearings in specified session — get_session_hearings","title":"Retrieve hearings in specified session — get_session_hearings","text":"function retrieving hearings specified parliamentary session.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_hearings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve hearings in specified session — get_session_hearings","text":"","code":"get_session_hearings(sessionid = NA, good_manners = 0, cores = 1)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_hearings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve hearings in specified session — get_session_hearings","text":"sessionid Character string indicating id parliamentary session retrieve. good_manners Integer. Seconds delay calls making multiple calls function cores Integer...","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_hearings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve hearings in specified session — get_session_hearings","text":"list four elements: $root (hearing meta data) $hearing (main data hearing) $hearing_case_info (named list hearing id information case(s) belonging hearing) $hearing_date (named list hearing id date(s) hearing held)","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_hearings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve hearings in specified session — get_session_hearings","text":"","code":"if (FALSE) {  hear <- get_session_hearings(\"2010-2011\") head(hear$hearing)  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_meetings.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all meetings for a specified parliamentary session — get_session_meetings","title":"Retrieve all meetings for a specified parliamentary session — get_session_meetings","text":"function retrieving meetings specific parliamentary session","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_meetings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all meetings for a specified parliamentary session — get_session_meetings","text":"","code":"get_session_meetings(sessionid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_meetings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all meetings for a specified parliamentary session — get_session_meetings","text":"sessionid Character string indicating id session request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_meetings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all meetings for a specified parliamentary session — get_session_meetings","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_meetings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all meetings for a specified parliamentary session — get_session_meetings","text":"","code":"if (FALSE) {  meet <- get_session_meetings(\"2013-2014\") head(meet)  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_mp_speech_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all speech activity from one MP for a given session — get_session_mp_speech_activity","title":"Retrieve all speech activity from one MP for a given session — get_session_mp_speech_activity","text":"function retrieving speech activity MP specific parliamentary session. available 2011-2012 session onwards.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_mp_speech_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all speech activity from one MP for a given session — get_session_mp_speech_activity","text":"","code":"get_session_mp_speech_activity(sessionid = NA, mp_id = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_mp_speech_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all speech activity from one MP for a given session — get_session_mp_speech_activity","text":"sessionid Character string indicating session retrieve speeches . mp_id Character string MP retreive speeches given session. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_mp_speech_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all speech activity from one MP for a given session — get_session_mp_speech_activity","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_mp_speech_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all speech activity from one MP for a given session — get_session_mp_speech_activity","text":"","code":"if (FALSE) {  activ <- get_session_mp_speech_activity(\"2012-2013\", \"ALYS\") head(activ) }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_parties.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary parties in specified session — get_session_parties","title":"Parliamentary parties in specified session — get_session_parties","text":"function retrieving Norwegian parliamentary parties specified parliamentary session","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_parties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary parties in specified session — get_session_parties","text":"","code":"get_session_parties(sessionid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_parties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parliamentary parties in specified session — get_session_parties","text":"sessionid Character string indicating id parliamentary session retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_parties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliamentary parties in specified session — get_session_parties","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_parties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliamentary parties in specified session — get_session_parties","text":"","code":"if (FALSE) {  parties <- get_session_parties(\"2003-2004\") parties  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_publications.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve publications of a type in a parliamentary session — get_session_publications","title":"Retrieve publications of a type in a parliamentary session — get_session_publications","text":"function retrieving one several publication types within parliamentary session.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve publications of a type in a parliamentary session — get_session_publications","text":"","code":"get_session_publications(sessionid = NA, type = \"referat\", good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve publications of a type in a parliamentary session — get_session_publications","text":"sessionid Character string indicating id hearing retrieve. type Character specifying type publication download. Available types \"referat\" (minutes), \"innstilling\" (proposition), \"innberetning\" (report), \"lovvedtak\" (law decision), \"lovanmerkning\" (law note), \"dok8\" (MP proposal) \"dok12\" (Constitutional proposal), \"dokumentserie\" (document series). Defaults \"referat\". good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve publications of a type in a parliamentary session — get_session_publications","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_publications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve publications of a type in a parliamentary session — get_session_publications","text":"","code":"if (FALSE) {  pub <- get_session_publications(\"1998-99\") head(pub)  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_questions.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary questions in a session — get_session_questions","title":"Parliamentary questions in a session — get_session_questions","text":"function retrieving questions within parliamentary session.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_questions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary questions in a session — get_session_questions","text":"","code":"get_session_questions(sessionid = NA, q_type = NA, status = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_questions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parliamentary questions in a session — get_session_questions","text":"sessionid Character string indicating id session request interpellations q_type Character string indicating type question retrieve. Options \"interpellasjoner\" (interpellations), \"sporretimesporsmal\" (oral questions), \"skriftligesporsmal\" (written questions). status Character string question status extraction. Possible values NA (extract questions), \"til_behandling\" (pending questions), \"trukket\" (withdrawn questions), \"bortfalt\" (lapsed questions), \"alle\" (questions) good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_questions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliamentary questions in a session — get_session_questions","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_session_questions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliamentary questions in a session — get_session_questions","text":"","code":"if (FALSE) { interp <- get_session_questions(sessionid = \"2013-2014\",                                  q_type = \"interpellasjoner\",                                  status = \"trukket\") interp }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_topics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of topics and sub-topics for the Norwegian parliament — get_topics","title":"Get list of topics and sub-topics for the Norwegian parliament — get_topics","text":"function retrieving topic keys used label various data Norwegian parliament.","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_topics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of topics and sub-topics for the Norwegian parliament — get_topics","text":"","code":"get_topics(keep_sub_topics = TRUE)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_topics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of topics and sub-topics for the Norwegian parliament — get_topics","text":"keep_sub_topics Logical. Whether keep sub-topics (default) main topics .","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_topics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of topics and sub-topics for the Norwegian parliament — get_topics","text":"list two elements: $topics (topics) $main_topics (exclusively main topics, keep_sub_topics = TRUE)","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_topics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of topics and sub-topics for the Norwegian parliament — get_topics","text":"","code":"# Request the data tops <- get_topics()  # Look at the first main topic tops$main_topics[1, ] #>                       response_date version is_main_topic main_topic_id id #> 1 2023-12-01T13:04:55.2548091+01:00     1.6          true             5  5 #>         name #> 1 ARBEIDSLIV  # Extract all sub-topics for the first main topic tops$topics[which(tops$topics$main_topic_id == 5), ] #>                       response_date version is_main_topic main_topic_id  id #> 1 2023-12-01T13:04:55.2548091+01:00     1.6         false             5 205 #> 2 2023-12-01T13:04:55.2548091+01:00     1.6         false             5  94 #> 3 2023-12-01T13:04:55.2548091+01:00     1.6         false             5  95 #> 4 2023-12-01T13:04:55.2548091+01:00     1.6         false             5   7 #>              name #> 1    ARBEIDSMILJØ #> 2   ARBEIDSVILKÅR #> 3 LØNN OG INNTEKT #> 4   SYSSELSETTING"},{"path":"https://martigso.github.io/stortingscrape/reference/get_vote.html","id":null,"dir":"Reference","previous_headings":"","what":"Retreive votes for a specific case — get_vote","title":"Retreive votes for a specific case — get_vote","text":"function retrieving votes case. Vote data available 2011-2012 session","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_vote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retreive votes for a specific case — get_vote","text":"","code":"get_vote(caseid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_vote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retreive votes for a specific case — get_vote","text":"caseid Character string indicating id case request votes good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_vote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retreive votes for a specific case — get_vote","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_vote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retreive votes for a specific case — get_vote","text":"","code":"if (FALSE) {  get_vote(63033)  }"},{"path":"https://martigso.github.io/stortingscrape/reference/get_written_hearing_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve written input for a specified hearing — get_written_hearing_input","title":"Retrieve written input for a specified hearing — get_written_hearing_input","text":"function retrieving written input specified hearing","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_written_hearing_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve written input for a specified hearing — get_written_hearing_input","text":"","code":"get_written_hearing_input(hearingid = NA, good_manners = 0)"},{"path":"https://martigso.github.io/stortingscrape/reference/get_written_hearing_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve written input for a specified hearing — get_written_hearing_input","text":"hearingid Character string indicating id hearing retrieve. good_manners Integer. Seconds delay calls making multiple calls function","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/get_written_hearing_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve written input for a specified hearing — get_written_hearing_input","text":"data.frame following variables:","code":""},{"path":[]},{"path":"https://martigso.github.io/stortingscrape/reference/get_written_hearing_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve written input for a specified hearing — get_written_hearing_input","text":"","code":"if (FALSE) {  get_written_hearing_input(hearingid = 10004243)  }"},{"path":"https://martigso.github.io/stortingscrape/reference/interp0203.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpellations from the 2002-2003 — interp0203","title":"Interpellations from the 2002-2003 — interp0203","text":"dataset containing interpellations 2002-2003 parliamentary session Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/interp0203.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpellations from the 2002-2003 — interp0203","text":"","code":"interp0203"},{"path":"https://martigso.github.io/stortingscrape/reference/interp0203.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interpellations from the 2002-2003 — interp0203","text":"data frame 26 columns 22 rows response_date Date data retrieval version Data version API answ_by_id Id minister answering question answ_by_minister_id Department id answering minister answ_by_minister_title Department title answering minister answ_date Date answer given answ_on_belhalf_of Answer given behalf answ_on_belhalf_of_minister_id Department id minister given answer behalf answ_on_belhalf_of_minister_title Department title minister given answer behalf topic_ids Id relevant topics question moved_to Question moved asked_by_other_id MP id, question asked questioning MP id Question id correct_person documented API correct_person_minister_id documented API correct_person_minister_title documented API sendt_date Date question sent session_id Session id question_from_id Question MP id qustion_number Question number within session qustion_to_id Question directed minister id qustion_to_minister_id Question directed minister department id qustion_to_minister_title Question directed minister department title type Question type title Question title status Question status","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/interp0203.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Interpellations from the 2002-2003 — interp0203","text":"https://data.stortinget./eksport/interpellasjoner?sesjonid=2002-2003","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/mps4549.html","id":null,"dir":"Reference","previous_headings":"","what":"Members of parliament from the 1945-1949 — mps4549","title":"Members of parliament from the 1945-1949 — mps4549","text":"dataset containing MPs 1945-1949 parliamentary period Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/mps4549.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Members of parliament from the 1945-1949 — mps4549","text":"","code":"mps4549"},{"path":"https://martigso.github.io/stortingscrape/reference/mps4549.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Members of parliament from the 1945-1949 — mps4549","text":"data frame 12 columns 150 rows response_date Date data retrieval version Data version API death Date death lastname MP last name birth Date birth firstname MP first name mp_id MP id gender MP gender county_id Id county MP represented party_id Id party MP represented substitute_mp Logical whether MP substitute period_id Id period represented ","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/mps4549.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Members of parliament from the 1945-1949 — mps4549","text":"https://data.stortinget./eksport/representanter?stortingsperiodeid=1945-49","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/parl_periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary periods — parl_periods","title":"Parliamentary periods — parl_periods","text":"dataset containing parliamentary periods Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/parl_periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary periods — parl_periods","text":"","code":"parl_periods"},{"path":"https://martigso.github.io/stortingscrape/reference/parl_periods.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parliamentary periods — parl_periods","text":"data frame 12 columns 150 rows response_date Date data retrieval version Data version API Date session started id Id session (used functions) Date session ended years year year full format","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/parl_periods.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Parliamentary periods — parl_periods","text":"https://data.stortinget./eksport/stortingsperioder","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/parl_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliamentary sessions — parl_sessions","title":"Parliamentary sessions — parl_sessions","text":"dataset containing parliamentary sessions Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/parl_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliamentary sessions — parl_sessions","text":"","code":"parl_sessions"},{"path":"https://martigso.github.io/stortingscrape/reference/parl_sessions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parliamentary sessions — parl_sessions","text":"data frame 6 columns 36 rows response_date Date data retrieval version Data version API Date session started id Id session (used functions) Date session ended years year year full format","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/parl_sessions.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Parliamentary sessions — parl_sessions","text":"https://data.stortinget./eksport/sesjoner","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/read_obt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Oslo-Bergen-Tagger processed files into R — read_obt","title":"Read Oslo-Bergen-Tagger processed files into R — read_obt","text":"function reading OBT-tagged files","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/read_obt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Oslo-Bergen-Tagger processed files into R — read_obt","text":"","code":"read_obt(file = NA)"},{"path":"https://martigso.github.io/stortingscrape/reference/read_obt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Oslo-Bergen-Tagger processed files into R — read_obt","text":"file character. Path OBT-tagged file","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/read_obt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Oslo-Bergen-Tagger processed files into R — read_obt","text":"data frame following variables:","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/read_obt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Oslo-Bergen-Tagger processed files into R — read_obt","text":"","code":"if (FALSE) { sample_text <- read_obt(\"./inst/extdata/obt_sample.txt\") head(sample_text) }"},{"path":"https://martigso.github.io/stortingscrape/reference/vote.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta data on votes of case id 78686 — vote","title":"Meta data on votes of case id 78686 — vote","text":"dataset containing vote infomation case id 78686 Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/vote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta data on votes of case id 78686 — vote","text":"","code":"vote"},{"path":"https://martigso.github.io/stortingscrape/reference/vote.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Meta data on votes of case id 78686 — vote","text":"list three elements (votes) response_date Date data retrieval version Data version API case_id Case id vote alternative_vote Whether vote alternative vote n_for Number votes n_absent Number MPs absent n_against Number votes treatment_order Order treated votes agenda_case_number Case number agenda meeting free_vote Logical indication whether vote related case whole comment Vote comment meeting_map_number Number meeting map personal_vote Logical indication whether vote recorded roll call president_id Id president holding president chair time voting president_party_id Party sitting president adopted Logical indication whether proposal voted adopted vote_id Id vote vote_method Voting method vote_result_type Result type (enstemmig_vedtatt = unanimously adopted) vote_result_type_text See vote_result_type vote_topic Description proposal voted upon vote_datetime Date time vote","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/vote.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Meta data on votes of case id 78686 — vote","text":"https://data.stortinget./eksport/voteringsresultat?voteringid=15404","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/vote_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Roll call vote results for vote ids 15404, 15405, and 15406 — vote_result","title":"Roll call vote results for vote ids 15404, 15405, and 15406 — vote_result","text":"dataset containing personal votes votes 15404, 15405, 15406 Stortinget","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/vote_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Roll call vote results for vote ids 15404, 15405, and 15406 — vote_result","text":"","code":"vote_result"},{"path":"https://martigso.github.io/stortingscrape/reference/vote_result.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Roll call vote results for vote ids 15404, 15405, and 15406 — vote_result","text":"list one vote per element response_date Date data retrieval version Data version API vote_id Id vote mp_id MP id party_id Party id vote Vote: , mot (), ikke_tilstede (absent) permanent_sub_for Id MP originally holding seat, substitute permanent sub_for Id MP originally holding seat","code":""},{"path":"https://martigso.github.io/stortingscrape/reference/vote_result.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Roll call vote results for vote ids 15404, 15405, and 15406 — vote_result","text":"https://data.stortinget./eksport/voteringsresultat?voteringid=15404, https://data.stortinget./eksport/voteringsresultat?voteringid=15405, https://data.stortinget./eksport/voteringsresultat?voteringid=15406","code":""},{"path":"https://martigso.github.io/stortingscrape/news/index.html","id":"stortingscrape-014","dir":"Changelog","previous_headings":"","what":"stortingscrape 0.1.4","title":"stortingscrape 0.1.4","text":"Fixed typos readme Reworked read_obt() function package rely dplyr Added hex badge logo. Extremely important. IMPORTANT: Fixed bug get_session_questions(), presence unanswered questions returned error instead NA IMPORTANT: Removed variable get_vote() suddenly disappeared API.","code":""},{"path":"https://martigso.github.io/stortingscrape/news/index.html","id":"stortingscrape-013","dir":"Changelog","previous_headings":"","what":"stortingscrape 0.1.3","title":"stortingscrape 0.1.3","text":"CRAN release: 2023-03-23 IMPORTANT: Fixed issue get_mp_bio(), broke API update. IMPORTANT: Fixed typo issue – renaming variables `get_session_questions() Added pkgdown page via gh-pages Changed color text logo Added NEWS.md file track changes package.","code":""}]
